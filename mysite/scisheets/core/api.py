"""
API for SciSheets. This consists of three parts: 
  1. the formulas API that is used in formulas 
  2. the plugin API that is used in the python functions referenced in formulas
  3. the administrative API generated by SciSheets
"""

from column import Column
from table import Table
import util.util as util
import api_util
from util.trinary import Trinary
from util.combinatoric_list import CombinatoricList
import collections
import os


class API(object):
  """
  Code that is common to the formulas and plugin APIs.
  """

  def __init__(self, file_path):
    self._file_path = file_path
    self.table = None
    self._column_idx = None

  def assignColumnValuesFromVariables(self, 
                                      prefix="", 
                                      excluded=None, 
                                      include_only=None):
    """
    :param str prefix: prefix prepended to form the name of the column variable
    :param list-of-str excluded: list of column names not to be initialized
    :param list-of-str include_only: list of the column names to be initialized
    Notes: if excluded and include_only are None, then all columns
    are initialized
    """
    if include_only is None:
      columns = self.table.getColumns()
    else:
      columns = []
      for name in include_only:
        columns.append(self.table.columnFromName(name))
    if excluded is None:
      excluded = []
    for column in columns:
      if not column.getName() in excluded:
        api_util.assignColumnValuesFromVariable(column, prefix=prefix)
    return None

  def initialize(self):
    """
    Does initialization at the beginning of executing table
    code.
    """
    self.table = api_util.getTableFromFile(self._file_path)

  def assignVariablesFromColumnValues(self, 
                                      prefix="", 
                                      excluded=None, 
                                      include_only=None):
    """
    :param str prefix: prefix prepended to form the name of the column variable
    :param list-of-str excluded: list of column names not to be initialized
    :param list-of-str include_only: list of the column names to be initialized
    :return error: error from executing statements
    Notes: if excluded and include_only are None, then all columns
    are initialized
    """
    if include_only is None:
      columns = self.table.getColumns()
    else:
      columns = []
      for name in include_only:
        columns.append(self.table.columnFromName(name))
    if excluded is None:
      excluded = []
    for column in columns:
      if not column.getName() in excluded:
        error = api_util.assignVariableFromColumnValues(column, 
            prefix=prefix)
        if error is not None:
          return error
    return None

  def stop(self):
    """
    Clean up after the completion of executing Table code.
    """
    pass


class APIAdmin(API):
  """
  Methods and properties used in support of the user APIs.
  """

  def setColumnIndex(self, column_idx):
    self._column_idx = column_idx


class APIFormulas(API):
  """
  Formulas API
  """

  def _getColumn(self, column_id, validate=True):
    """
    :param column_id: either the name of the column or
                        its 1-based index after the name ('row') column
    :param bool validate: Validates the columns present if True
    :return: column object
    :raises: ValueError if column_name doesn't exist
    """
    if isinstance(column_id, int):
      column = self._table.columnFromIndex(column_id)
    elif isinstance(column_id, str):
      column = self._table.columnFromName(column_id)
    else:
      column = None
    if column is None and validate:
      raise ValueError("%s column does not exist." % str(column_id))
    return column

  def createTruthTable(self, column_names, only_boolean=False):
    """
    Creates a truth table with all combinations of Boolean
    values for the number of columns provided.
    :param list-of-str column_names: names of columns to create
    :param bool only_boolean: True if only want boolean values
                              in the truth table
    Usage example:
      S.createTruthTable(['A', 'B'])
      Ap = S.createTrinary(A)  # Trinary object
      Bp = S.createTrinary(B)  # Trinary object
      Cp = Ap & Bp | -Bp
    """
    columns = []
    for name in column_names:
      columns.append(self._createColumn(name, asis=True))
    # Create the column values
    elements = [False, True]
    if not only_boolean:
      elements.insert(0, None)
    num_lists = len(column_names)
    combinatorics = CombinatoricList(elements)
    results = combinatorics.run(num_lists)
    # Assign the results
    for idx in range(num_lists):
      column = columns[idx]
      self._table.addCells(column, results[idx])

  @staticmethod 
  def createTrinary(iterable):
    return Trinary(iterable)

  def _createColumn(self, column_name, index=None, asis=False):
    """
    Creates a new column, either just to the right of the
    current column (index=None) are at a specific index.
    :param str column_name: name of the column to create
    :param int index: index where the column is to be placed
    :param bool asis: Column data should not be coerced
    :return: column object
    :raises: ValueError if invalid name for column
    """
    # First delete the column to make sure that it doesn't exist
    self.deleteColumn(column_name)
    # Now create the column
    column = Column(column_name, asis=asis)
    error = self._table.addColumn(column, index)
    if error is not None:
      raise ValueError(error)
    return column

  def createColumn(self, column_name, index=None):
    """
    Creates a new column, either just to the right of the
    current column (index=None) are at a specific index.
    :param str column_name: name of the column to create
    :param int index: index where the column is to be placed
    """
    self._createColumn(column_name, index)

  def deleteColumn(self, column_id):
    """
    Detes an existing a column if it exists.
    :param column_id: either the name of the column or 
                      the 1-based index after the 'row' column
    """
    column = self._getColumn(column_id, validate=False)
    if column is not None:
      _  = self._table.deleteColumn(column)

  def param(self, column_id, row_num=1):
    """
    :param str column_name: name of the column referenced
    :param int row_num: row from which the parameter is extracted
    :return: scalar object at the indicate row for the column.
    :raises: ValueError
    """
    column = self._getColumn(column_id)
    values = column.getCells()
    if len(values) < row_num - 1:
      raise ValueError("%s column does not have %d values." 
          % (column_id, row_num))
    return values[row_num-1]


class APIPlugin(API):
  """
  Formulas API
  """

