ccopy_reg
_reconstructor
p0
(cscisheets.ui.dt_table
DTTable
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'_columns'
p6
(lp7
g0
(cscisheets.core.column
Column
p8
g2
Ntp9
Rp10
(dp11
S'_asis'
p12
I01
sS'_owning_table'
p13
g4
sS'_cells'
p14
(lp15
S'1'
p16
aS'2'
p17
aS'3'
p18
aS'4'
p19
aS'5'
p20
aS'6'
p21
aS'7'
p22
aS'8'
p23
aS'9'
p24
aS'10'
p25
aS'11'
p26
aS'12'
p27
aS'13'
p28
aS'14'
p29
aS'15'
p30
asS'_formula_statement'
p31
g0
(cscisheets.core.column
FormulaStatement
p32
g2
Ntp33
Rp34
(dp35
S'_statement'
p36
NsS'_column'
p37
g10
sS'_isExpression'
p38
I00
sS'_isStatement'
p39
I00
sS'_formula'
p40
NsbsS'_data_class'
p41
g0
(cscisheets.core.helpers.api_util
DataClass
p42
c__builtin__
tuple
p43
(cnumpy
ndarray
p44
cscisheets.core.helpers.api_util
makeArray
p45
tp46
tp47
Rp48
sS'_name'
p49
S'row'
p50
sbag0
(g8
g2
Ntp51
Rp52
(dp53
g12
I00
sg13
g4
sg14
(lp54
I65
aI50
aI68
aI92
aI63
aI66
aI73
aI58
aI63
aI70
aI99
aI63
aI80
aI60
aI73
asg31
g0
(g32
g2
Ntp55
Rp56
(dp57
g36
Vimport random\u000a#EffData = [random.randint(50, 100) for x in range(15)]
p58
sg37
g52
sg38
I00
sg39
I00
sg40
Vimport random\u000a#EffData = [random.randint(50, 100) for x in range(15)]
p59
sbsg41
g0
(g42
g43
(g44
g45
tp60
tp61
Rp62
sg49
VEffData
p63
sbag0
(g8
g2
Ntp64
Rp65
(dp66
g12
I00
sg13
g4
sg14
(lp67
F3.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg31
g0
(g32
g2
Ntp68
Rp69
(dp70
g36
Vbatch_size = int(BatchSize[0])
p71
sg37
g65
sg38
I00
sg39
I00
sg40
g71
sbsg41
g0
(g42
g43
(g44
g45
tp72
tp73
Rp74
sg49
VBatchSize
p75
sbag0
(g8
g2
Ntp76
Rp77
(dp78
g12
I00
sg13
g4
sg14
(lp79
F60.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg31
g0
(g32
g2
Ntp80
Rp81
(dp82
g36
Vmin_eff = int(MinEff[0])
p83
sg37
g77
sg38
I00
sg39
I00
sg40
g83
sbsg41
g0
(g42
g43
(g44
g45
tp84
tp85
Rp86
sg49
VMinEff
p87
sbag0
(g8
g2
Ntp88
Rp89
(dp90
g12
I00
sg13
g4
sg14
(lp91
F8.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg31
g0
(g32
g2
Ntp92
Rp93
(dp94
g36
Vmax_std = MaxStd[0]
p95
sg37
g89
sg38
I00
sg39
I00
sg40
g95
sbsg41
g0
(g42
g43
(g44
g45
tp96
tp97
Rp98
sg49
VMaxStd
p99
sbag0
(g8
g2
Ntp100
Rp101
(dp102
g12
I00
sg13
g4
sg14
(lp103
(lp104
I65
aI50
aI68
aa(lp105
I92
aI63
aI66
aa(lp106
I73
aI58
aI63
aa(lp107
I70
aI99
aI63
aa(lp108
I80
aI60
aI73
aaNaNaNaNaNaNaNaNaNaNasg31
g0
(g32
g2
Ntp109
Rp110
(dp111
g36
V# Grouping groups together samples based on BatchSize\u000abatch_count = len(EffData)/batch_size\u000aGroupedData = np.array(EffData).reshape(batch_count, batch_size)
p112
sg37
g101
sg38
I00
sg39
I00
sg40
V# Grouping groups together samples based on BatchSize\u000abatch_count = len(EffData)/batch_size\u000aGroupedData = np.array(EffData).reshape(batch_count, batch_size)
p113
sbsg41
g0
(g42
g43
(g44
g45
tp114
tp115
Rp116
sg49
VGroupedData
p117
sbag0
(g8
g2
Ntp118
Rp119
(dp120
g12
I00
sg13
g4
sg14
(lp121
(lp122
cnumpy.core.multiarray
scalar
p123
(cnumpy
dtype
p124
(S'i8'
p125
I0
I1
tp126
Rp127
(I3
S'<'
p128
NNNI-1
I-1
I0
tp129
bS'A\x00\x00\x00\x00\x00\x00\x00'
p130
tp131
Rp132
ag123
(g127
S'D\x00\x00\x00\x00\x00\x00\x00'
p133
tp134
Rp135
aa(lp136
g123
(g127
S'\\\x00\x00\x00\x00\x00\x00\x00'
p137
tp138
Rp139
ag123
(g127
S'?\x00\x00\x00\x00\x00\x00\x00'
p140
tp141
Rp142
ag123
(g127
S'B\x00\x00\x00\x00\x00\x00\x00'
p143
tp144
Rp145
aa(lp146
g123
(g127
S'I\x00\x00\x00\x00\x00\x00\x00'
p147
tp148
Rp149
ag123
(g127
S'?\x00\x00\x00\x00\x00\x00\x00'
p150
tp151
Rp152
aa(lp153
g123
(g127
S'F\x00\x00\x00\x00\x00\x00\x00'
p154
tp155
Rp156
ag123
(g127
S'c\x00\x00\x00\x00\x00\x00\x00'
p157
tp158
Rp159
ag123
(g127
S'?\x00\x00\x00\x00\x00\x00\x00'
p160
tp161
Rp162
aa(lp163
g123
(g127
S'P\x00\x00\x00\x00\x00\x00\x00'
p164
tp165
Rp166
ag123
(g127
S'<\x00\x00\x00\x00\x00\x00\x00'
p167
tp168
Rp169
ag123
(g127
S'I\x00\x00\x00\x00\x00\x00\x00'
p170
tp171
Rp172
aaNaNaNaNaNaNaNaNaNaNasg31
g0
(g32
g2
Ntp173
Rp174
(dp175
g36
V# Pruning eliminates values less than MinEff\u000aGroupedPrunedData = []\u000afor data in GroupedData:\u000a  new_data = []\u000a  for d in data:\u000a    if d >= min_eff:\u000a      new_data.append(d)\u000a  GroupedPrunedData.append(new_data)
p176
sg37
g119
sg38
I00
sg39
I00
sg40
V# Pruning eliminates values less than MinEff\u000aGroupedPrunedData = []\u000afor data in GroupedData:\u000a  new_data = []\u000a  for d in data:\u000a    if d >= min_eff:\u000a      new_data.append(d)\u000a  GroupedPrunedData.append(new_data)
p177
sbsg41
g0
(g42
g43
(g44
g45
tp178
tp179
Rp180
sg49
VGroupedPrunedData
p181
sbag0
(g8
g2
Ntp182
Rp183
(dp184
g12
I00
sg13
g4
sg14
(lp185
g122
a(lp186
g142
ag145
aag146
a(lp187
g156
ag162
aa(lp188
g166
ag172
aaNaNaNaNaNaNaNaNaNaNasg31
g0
(g32
g2
Ntp189
Rp190
(dp191
g36
V#Eliminate Values if exceed MaxStd\u000aCensoredData = []\u000afor data in GroupedPrunedData:\u000a  if (len(data) < 3) or (np.std(data) <= max_std):\u000a    CensoredData.append(data)\u000a  else:\u000a    mean = np.average(data)\u000a    distances = [np.abs(x - mean) for x in data]\u000a    max_distance = np.max(distances)\u000a    new_data = [x for x in data if np.abs(x - mean) < max_distance]\u000a    CensoredData.append(new_data)\u000a    
p192
sg37
g183
sg38
I00
sg39
I00
sg40
V#Eliminate Values if exceed MaxStd\u000aCensoredData = []\u000afor data in GroupedPrunedData:\u000a  if (len(data) < 3) or (np.std(data) <= max_std):\u000a    CensoredData.append(data)\u000a  else:\u000a    mean = np.average(data)\u000a    distances = [np.abs(x - mean) for x in data]\u000a    max_distance = np.max(distances)\u000a    new_data = [x for x in data if np.abs(x - mean) < max_distance]\u000a    CensoredData.append(new_data)\u000a    
p193
sbsg41
g0
(g42
g43
(g44
g45
tp194
tp195
Rp196
sg49
VCensoredData
p197
sbag0
(g8
g2
Ntp198
Rp199
(dp200
g12
I00
sg13
g4
sg14
(lp201
F66.5
aF64.5
aF68.0
aF66.5
aF76.5
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg31
g0
(g32
g2
Ntp202
Rp203
(dp204
g36
VMean = []\u000afor data in CensoredData:\u000a  Mean.append(round(np.average(data),2))
p205
sg37
g199
sg38
I00
sg39
I00
sg40
VMean = []\u000afor data in CensoredData:\u000a  Mean.append(round(np.average(data),2))
p206
sbsg41
g0
(g42
g43
(g44
g45
tp207
tp208
Rp209
sg49
VMean
p210
sbag0
(g8
g2
Ntp211
Rp212
(dp213
g12
I00
sg13
g4
sg14
(lp214
F1.5
aF1.5
aF5.0
aF3.5
aF3.5
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg31
g0
(g32
g2
Ntp215
Rp216
(dp217
g36
VStd = []\u000afor data in CensoredData:\u000a  Std.append(round(np.std(data),2))
p218
sg37
g212
sg38
I00
sg39
I00
sg40
VStd = []\u000afor data in CensoredData:\u000a  Std.append(round(np.std(data),2))
p219
sbsg41
g0
(g42
g43
(g44
g45
tp220
tp221
Rp222
sg49
VStd
p223
sbasS'_filepath'
p224
V/home/ubuntu/SciSheets/mysite/user/guest/tables/kristen_gene_table.pcl
p225
sg49
VGeneTable
p226
sb.