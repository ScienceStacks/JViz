ccopy_reg
_reconstructor
p0
(cscisheets.ui.dt_table
DTTable
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'_columns'
p6
(lp7
g0
(cscisheets.core.column
Column
p8
g2
Ntp9
Rp10
(dp11
S'_asis'
p12
I01
sS'_owning_table'
p13
g4
sS'_cells'
p14
(lp15
S'1'
p16
aS'2'
p17
aS'3'
p18
aS'4'
p19
aS'5'
p20
aS'6'
p21
aS'7'
p22
aS'8'
p23
aS'9'
p24
aS'10'
p25
aS'11'
p26
aS'12'
p27
aS'13'
p28
aS'14'
p29
aS'15'
p30
aS'16'
p31
aS'17'
p32
aS'18'
p33
aS'19'
p34
aS'20'
p35
aS'21'
p36
aS'22'
p37
aS'23'
p38
aS'24'
p39
asS'_formula_statement'
p40
g0
(cscisheets.core.column
FormulaStatement
p41
g2
Ntp42
Rp43
(dp44
S'_statement'
p45
NsS'_column'
p46
g10
sS'_isExpression'
p47
I00
sS'_isStatement'
p48
I00
sS'_formula'
p49
NsbsS'_data_class'
p50
g0
(cscisheets.core.helpers.api_util
DataClass
p51
c__builtin__
tuple
p52
(cnumpy
ndarray
p53
cscisheets.core.helpers.api_util
makeArray
p54
tp55
tp56
Rp57
sS'_name'
p58
S'row'
p59
sbag0
(g8
g2
Ntp60
Rp61
(dp62
g12
I00
sg13
g4
sg14
(lp63
I69
aI89
aI77
aI94
aI74
aI72
aI76
aI91
aI92
aI53
aI95
aI93
aI100
aI88
aI82
aI56
aI63
aI67
aI62
aI63
aI83
aI89
aI67
aI67
asg40
g0
(g41
g2
Ntp64
Rp65
(dp66
g45
Vimport random\u000aEffData = [random.randint(50, 100) for x in range(24)]
p67
sg46
g61
sg47
I00
sg48
I00
sg49
Vimport random\u000aEffData = [random.randint(50, 100) for x in range(24)]
p68
sbsg50
g0
(g51
g52
(g53
g54
tp69
tp70
Rp71
sg58
VEffData
p72
sbag0
(g8
g2
Ntp73
Rp74
(dp75
g12
I00
sg13
g4
sg14
(lp76
F4.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp77
Rp78
(dp79
g45
Vbatch_size = int(BatchSize[0])
p80
sg46
g74
sg47
I00
sg48
I00
sg49
g80
sbsg50
g0
(g51
g52
(g53
g54
tp81
tp82
Rp83
sg58
VBatchSize
p84
sbag0
(g8
g2
Ntp85
Rp86
(dp87
g12
I00
sg13
g4
sg14
(lp88
F60.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp89
Rp90
(dp91
g45
Vmin_eff = int(MinEff[0])
p92
sg46
g86
sg47
I00
sg48
I00
sg49
g92
sbsg50
g0
(g51
g52
(g53
g54
tp93
tp94
Rp95
sg58
VMinEff
p96
sbag0
(g8
g2
Ntp97
Rp98
(dp99
g12
I00
sg13
g4
sg14
(lp100
F5.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp101
Rp102
(dp103
g45
Vmax_std = MaxStd[0]
p104
sg46
g98
sg47
I00
sg48
I00
sg49
g104
sbsg50
g0
(g51
g52
(g53
g54
tp105
tp106
Rp107
sg58
VMaxStd
p108
sbag0
(g8
g2
Ntp109
Rp110
(dp111
g12
I00
sg13
g4
sg14
(lp112
(lp113
I69
aI89
aI77
aI94
aa(lp114
I74
aI72
aI76
aI91
aa(lp115
I92
aI53
aI95
aI93
aa(lp116
I100
aI88
aI82
aI56
aa(lp117
I63
aI67
aI62
aI63
aa(lp118
I83
aI89
aI67
aI67
aaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNasg40
g0
(g41
g2
Ntp119
Rp120
(dp121
g45
V# Grouping groups together samples based on BatchSize\u000abatch_count = len(EffData)/batch_size\u000aGroupedData = np.array(EffData).reshape(batch_count, batch_size)
p122
sg46
g110
sg47
I00
sg48
I00
sg49
V# Grouping groups together samples based on BatchSize\u000abatch_count = len(EffData)/batch_size\u000aGroupedData = np.array(EffData).reshape(batch_count, batch_size)
p123
sbsg50
g0
(g51
g52
(g53
g54
tp124
tp125
Rp126
sg58
VGroupedData
p127
sbag0
(g8
g2
Ntp128
Rp129
(dp130
g12
I00
sg13
g4
sg14
(lp131
(lp132
cnumpy.core.multiarray
scalar
p133
(cnumpy
dtype
p134
(S'i8'
p135
I0
I1
tp136
Rp137
(I3
S'<'
p138
NNNI-1
I-1
I0
tp139
bS'E\x00\x00\x00\x00\x00\x00\x00'
p140
tp141
Rp142
ag133
(g137
S'Y\x00\x00\x00\x00\x00\x00\x00'
p143
tp144
Rp145
ag133
(g137
S'M\x00\x00\x00\x00\x00\x00\x00'
p146
tp147
Rp148
ag133
(g137
S'^\x00\x00\x00\x00\x00\x00\x00'
p149
tp150
Rp151
aa(lp152
g133
(g137
S'J\x00\x00\x00\x00\x00\x00\x00'
p153
tp154
Rp155
ag133
(g137
S'H\x00\x00\x00\x00\x00\x00\x00'
p156
tp157
Rp158
ag133
(g137
S'L\x00\x00\x00\x00\x00\x00\x00'
p159
tp160
Rp161
ag133
(g137
S'[\x00\x00\x00\x00\x00\x00\x00'
p162
tp163
Rp164
aa(lp165
g133
(g137
S'\\\x00\x00\x00\x00\x00\x00\x00'
p166
tp167
Rp168
ag133
(g137
S'_\x00\x00\x00\x00\x00\x00\x00'
p169
tp170
Rp171
ag133
(g137
S']\x00\x00\x00\x00\x00\x00\x00'
p172
tp173
Rp174
aa(lp175
g133
(g137
S'd\x00\x00\x00\x00\x00\x00\x00'
p176
tp177
Rp178
ag133
(g137
S'X\x00\x00\x00\x00\x00\x00\x00'
p179
tp180
Rp181
ag133
(g137
S'R\x00\x00\x00\x00\x00\x00\x00'
p182
tp183
Rp184
aa(lp185
g133
(g137
S'?\x00\x00\x00\x00\x00\x00\x00'
p186
tp187
Rp188
ag133
(g137
S'C\x00\x00\x00\x00\x00\x00\x00'
p189
tp190
Rp191
ag133
(g137
S'>\x00\x00\x00\x00\x00\x00\x00'
p192
tp193
Rp194
ag133
(g137
S'?\x00\x00\x00\x00\x00\x00\x00'
p195
tp196
Rp197
aa(lp198
g133
(g137
S'S\x00\x00\x00\x00\x00\x00\x00'
p199
tp200
Rp201
ag133
(g137
S'Y\x00\x00\x00\x00\x00\x00\x00'
p202
tp203
Rp204
ag133
(g137
S'C\x00\x00\x00\x00\x00\x00\x00'
p205
tp206
Rp207
ag133
(g137
S'C\x00\x00\x00\x00\x00\x00\x00'
p208
tp209
Rp210
aaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNasg40
g0
(g41
g2
Ntp211
Rp212
(dp213
g45
V# Pruning eliminates values less than MinEff\u000aGroupedPrunedData = []\u000afor data in GroupedData:\u000a  new_data = []\u000a  for d in data:\u000a    if d >= min_eff:\u000a      new_data.append(d)\u000a  GroupedPrunedData.append(new_data)
p214
sg46
g129
sg47
I00
sg48
I00
sg49
V# Pruning eliminates values less than MinEff\u000aGroupedPrunedData = []\u000afor data in GroupedData:\u000a  new_data = []\u000a  for d in data:\u000a    if d >= min_eff:\u000a      new_data.append(d)\u000a  GroupedPrunedData.append(new_data)
p215
sbsg50
g0
(g51
g52
(g53
g54
tp216
tp217
Rp218
sg58
VGroupedPrunedData
p219
sbag0
(g8
g2
Ntp220
Rp221
(dp222
g12
I00
sg13
g4
sg14
(lp223
(lp224
g145
ag148
ag151
aa(lp225
g155
ag158
ag161
aag165
a(lp226
g181
ag184
aag185
a(lp227
g201
ag207
ag210
aaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNasg40
g0
(g41
g2
Ntp228
Rp229
(dp230
g45
V#Eliminate Values if exceed MaxStd\u000aCensoredData = []\u000afor data in GroupedPrunedData:\u000a  if (len(data) < 3) or (np.std(data) <= max_std):\u000a    CensoredData.append(data)\u000a  else:\u000a    mean = np.average(data)\u000a    distances = [np.abs(x - mean) for x in data]\u000a    max_distance = np.max(distances)\u000a    new_data = [x for x in data if np.abs(x - mean) < max_distance]\u000a    CensoredData.append(new_data)\u000a    
p231
sg46
g221
sg47
I00
sg48
I00
sg49
V#Eliminate Values if exceed MaxStd\u000aCensoredData = []\u000afor data in GroupedPrunedData:\u000a  if (len(data) < 3) or (np.std(data) <= max_std):\u000a    CensoredData.append(data)\u000a  else:\u000a    mean = np.average(data)\u000a    distances = [np.abs(x - mean) for x in data]\u000a    max_distance = np.max(distances)\u000a    new_data = [x for x in data if np.abs(x - mean) < max_distance]\u000a    CensoredData.append(new_data)\u000a    
p232
sbsg50
g0
(g51
g52
(g53
g54
tp233
tp234
Rp235
sg58
VCensoredData
p236
sbag0
(g8
g2
Ntp237
Rp238
(dp239
g12
I00
sg13
g4
sg14
(lp240
F86.67
aF74.0
aF93.33
aF85.0
aF63.75
aF72.33
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp241
Rp242
(dp243
g45
VMean = []\u000afor data in CensoredData:\u000a  Mean.append(round(np.average(data),2))
p244
sg46
g238
sg47
I00
sg48
I00
sg49
VMean = []\u000afor data in CensoredData:\u000a  Mean.append(round(np.average(data),2))
p245
sbsg50
g0
(g51
g52
(g53
g54
tp246
tp247
Rp248
sg58
VMean
p249
sbag0
(g8
g2
Ntp250
Rp251
(dp252
g12
I00
sg13
g4
sg14
(lp253
F7.13
aF1.63
aF1.25
aF3.0
aF1.92
aF7.54
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp254
Rp255
(dp256
g45
VStd = []\u000afor data in CensoredData:\u000a  Std.append(round(np.std(data),2))
p257
sg46
g251
sg47
I00
sg48
I00
sg49
VStd = []\u000afor data in CensoredData:\u000a  Std.append(round(np.std(data),2))
p258
sbsg50
g0
(g51
g52
(g53
g54
tp259
tp260
Rp261
sg58
VStd
p262
sbasS'_filepath'
p263
V/home/ubuntu/SciSheets/mysite/user/guest/tables/kristen_gene_table.pcl
p264
sg58
VGeneTable
p265
sb.