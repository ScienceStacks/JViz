ccopy_reg
_reconstructor
p0
(cscisheets.ui.dt_table
DTTable
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'_columns'
p6
(lp7
g0
(cscisheets.core.column
Column
p8
g2
Ntp9
Rp10
(dp11
S'_asis'
p12
I01
sS'_owning_table'
p13
g4
sS'_cells'
p14
(lp15
S'1'
p16
aS'2'
p17
aS'3'
p18
aS'4'
p19
aS'5'
p20
aS'6'
p21
aS'7'
p22
aS'8'
p23
aS'9'
p24
aS'10'
p25
aS'11'
p26
aS'12'
p27
aS'13'
p28
aS'14'
p29
aS'15'
p30
aS'16'
p31
aS'17'
p32
aS'18'
p33
aS'19'
p34
aS'20'
p35
aS'21'
p36
aS'22'
p37
aS'23'
p38
aS'24'
p39
asS'_formula_statement'
p40
g0
(cscisheets.core.column
FormulaStatement
p41
g2
Ntp42
Rp43
(dp44
S'_statement'
p45
NsS'_column'
p46
g10
sS'_isExpression'
p47
I00
sS'_isStatement'
p48
I00
sS'_formula'
p49
NsbsS'_data_class'
p50
g0
(cscisheets.core.helpers.api_util
DataClass
p51
c__builtin__
tuple
p52
(cnumpy
ndarray
p53
cscisheets.core.helpers.api_util
makeArray
p54
tp55
tp56
Rp57
sS'_name'
p58
S'row'
p59
sbag0
(g8
g2
Ntp60
Rp61
(dp62
g12
I00
sg13
g4
sg14
(lp63
I74
aI57
aI97
aI75
aI81
aI64
aI77
aI73
aI77
aI67
aI76
aI91
aI63
aI87
aI89
aI53
aI68
aI82
aI63
aI93
aI74
aI65
aI81
aI64
asg40
g0
(g41
g2
Ntp64
Rp65
(dp66
g45
Vimport random\u000aEffData = [random.randint(50, 100) for x in range(24)]
p67
sg46
g61
sg47
I00
sg48
I00
sg49
Vimport random\u000aEffData = [random.randint(50, 100) for x in range(24)]
p68
sbsg50
g0
(g51
g52
(g53
g54
tp69
tp70
Rp71
sg58
VEffData
p72
sbag0
(g8
g2
Ntp73
Rp74
(dp75
g12
I00
sg13
g4
sg14
(lp76
F8.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp77
Rp78
(dp79
g45
Vbatch_size = int(BatchSize[0])
p80
sg46
g74
sg47
I00
sg48
I00
sg49
g80
sbsg50
g0
(g51
g52
(g53
g54
tp81
tp82
Rp83
sg58
VBatchSize
p84
sbag0
(g8
g2
Ntp85
Rp86
(dp87
g12
I00
sg13
g4
sg14
(lp88
F60.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp89
Rp90
(dp91
g45
Vmin_eff = int(MinEff[0])
p92
sg46
g86
sg47
I00
sg48
I00
sg49
g92
sbsg50
g0
(g51
g52
(g53
g54
tp93
tp94
Rp95
sg58
VMinEff
p96
sbag0
(g8
g2
Ntp97
Rp98
(dp99
g12
I00
sg13
g4
sg14
(lp100
F5.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp101
Rp102
(dp103
g45
Vmax_std = MaxStd[0]
p104
sg46
g98
sg47
I00
sg48
I00
sg49
g104
sbsg50
g0
(g51
g52
(g53
g54
tp105
tp106
Rp107
sg58
VMaxStd
p108
sbag0
(g8
g2
Ntp109
Rp110
(dp111
g12
I00
sg13
g4
sg14
(lp112
(lp113
I74
aI57
aI97
aI75
aI81
aI64
aI77
aI73
aa(lp114
I77
aI67
aI76
aI91
aI63
aI87
aI89
aI53
aa(lp115
I68
aI82
aI63
aI93
aI74
aI65
aI81
aI64
aaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNasg40
g0
(g41
g2
Ntp116
Rp117
(dp118
g45
V# Grouping groups together samples based on BatchSize\u000abatch_count = len(EffData)/batch_size\u000aGroupedData = np.array(EffData).reshape(batch_count, batch_size)
p119
sg46
g110
sg47
I00
sg48
I00
sg49
V# Grouping groups together samples based on BatchSize\u000abatch_count = len(EffData)/batch_size\u000aGroupedData = np.array(EffData).reshape(batch_count, batch_size)
p120
sbsg50
g0
(g51
g52
(g53
g54
tp121
tp122
Rp123
sg58
VGroupedData
p124
sbag0
(g8
g2
Ntp125
Rp126
(dp127
g12
I00
sg13
g4
sg14
(lp128
(lp129
cnumpy.core.multiarray
scalar
p130
(cnumpy
dtype
p131
(S'i8'
p132
I0
I1
tp133
Rp134
(I3
S'<'
p135
NNNI-1
I-1
I0
tp136
bS'J\x00\x00\x00\x00\x00\x00\x00'
p137
tp138
Rp139
ag130
(g134
S'a\x00\x00\x00\x00\x00\x00\x00'
p140
tp141
Rp142
ag130
(g134
S'K\x00\x00\x00\x00\x00\x00\x00'
p143
tp144
Rp145
ag130
(g134
S'Q\x00\x00\x00\x00\x00\x00\x00'
p146
tp147
Rp148
ag130
(g134
S'@\x00\x00\x00\x00\x00\x00\x00'
p149
tp150
Rp151
ag130
(g134
S'M\x00\x00\x00\x00\x00\x00\x00'
p152
tp153
Rp154
ag130
(g134
S'I\x00\x00\x00\x00\x00\x00\x00'
p155
tp156
Rp157
aa(lp158
g130
(g134
S'M\x00\x00\x00\x00\x00\x00\x00'
p159
tp160
Rp161
ag130
(g134
S'C\x00\x00\x00\x00\x00\x00\x00'
p162
tp163
Rp164
ag130
(g134
S'L\x00\x00\x00\x00\x00\x00\x00'
p165
tp166
Rp167
ag130
(g134
S'[\x00\x00\x00\x00\x00\x00\x00'
p168
tp169
Rp170
ag130
(g134
S'?\x00\x00\x00\x00\x00\x00\x00'
p171
tp172
Rp173
ag130
(g134
S'W\x00\x00\x00\x00\x00\x00\x00'
p174
tp175
Rp176
ag130
(g134
S'Y\x00\x00\x00\x00\x00\x00\x00'
p177
tp178
Rp179
aa(lp180
g130
(g134
S'D\x00\x00\x00\x00\x00\x00\x00'
p181
tp182
Rp183
ag130
(g134
S'R\x00\x00\x00\x00\x00\x00\x00'
p184
tp185
Rp186
ag130
(g134
S'?\x00\x00\x00\x00\x00\x00\x00'
p187
tp188
Rp189
ag130
(g134
S']\x00\x00\x00\x00\x00\x00\x00'
p190
tp191
Rp192
ag130
(g134
S'J\x00\x00\x00\x00\x00\x00\x00'
p193
tp194
Rp195
ag130
(g134
S'A\x00\x00\x00\x00\x00\x00\x00'
p196
tp197
Rp198
ag130
(g134
S'Q\x00\x00\x00\x00\x00\x00\x00'
p199
tp200
Rp201
ag130
(g134
S'@\x00\x00\x00\x00\x00\x00\x00'
p202
tp203
Rp204
aaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNasg40
g0
(g41
g2
Ntp205
Rp206
(dp207
g45
V# Pruning eliminates values less than MinEff\u000aGroupedPrunedData = []\u000afor data in GroupedData:\u000a  new_data = []\u000a  for d in data:\u000a    if d >= min_eff:\u000a      new_data.append(d)\u000a  GroupedPrunedData.append(new_data)
p208
sg46
g126
sg47
I00
sg48
I00
sg49
V# Pruning eliminates values less than MinEff\u000aGroupedPrunedData = []\u000afor data in GroupedData:\u000a  new_data = []\u000a  for d in data:\u000a    if d >= min_eff:\u000a      new_data.append(d)\u000a  GroupedPrunedData.append(new_data)
p209
sbsg50
g0
(g51
g52
(g53
g54
tp210
tp211
Rp212
sg58
VGroupedPrunedData
p213
sbag0
(g8
g2
Ntp214
Rp215
(dp216
g12
I00
sg13
g4
sg14
(lp217
(lp218
g139
ag145
ag148
ag151
ag154
ag157
aa(lp219
g161
ag164
ag167
ag170
ag176
ag179
aa(lp220
g183
ag186
ag189
ag195
ag198
ag201
ag204
aaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNasg40
g0
(g41
g2
Ntp221
Rp222
(dp223
g45
V#Eliminate Values if exceed MaxStd\u000aCensoredData = []\u000afor data in GroupedPrunedData:\u000a  if (len(data) < 3) or (np.std(data) <= max_std):\u000a    CensoredData.append(data)\u000a  else:\u000a    mean = np.average(data)\u000a    distances = [np.abs(x - mean) for x in data]\u000a    max_distance = np.max(distances)\u000a    new_data = [x for x in data if np.abs(x - mean) < max_distance]\u000a    CensoredData.append(new_data)\u000a    
p224
sg46
g215
sg47
I00
sg48
I00
sg49
V#Eliminate Values if exceed MaxStd\u000aCensoredData = []\u000afor data in GroupedPrunedData:\u000a  if (len(data) < 3) or (np.std(data) <= max_std):\u000a    CensoredData.append(data)\u000a  else:\u000a    mean = np.average(data)\u000a    distances = [np.abs(x - mean) for x in data]\u000a    max_distance = np.max(distances)\u000a    new_data = [x for x in data if np.abs(x - mean) < max_distance]\u000a    CensoredData.append(new_data)\u000a    
p225
sbsg50
g0
(g51
g52
(g53
g54
tp226
tp227
Rp228
sg58
VCensoredData
p229
sbag0
(g8
g2
Ntp230
Rp231
(dp232
g12
I00
sg13
g4
sg14
(lp233
F74.0
aF81.17
aF71.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp234
Rp235
(dp236
g45
VMean = []\u000afor data in CensoredData:\u000a  Mean.append(round(np.average(data),2))
p237
sg46
g231
sg47
I00
sg48
I00
sg49
VMean = []\u000afor data in CensoredData:\u000a  Mean.append(round(np.average(data),2))
p238
sbsg50
g0
(g51
g52
(g53
g54
tp239
tp240
Rp241
sg58
VMean
p242
sbag0
(g8
g2
Ntp243
Rp244
(dp245
g12
I00
sg13
g4
sg14
(lp246
F5.16
aF8.53
aF7.45
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp247
Rp248
(dp249
g45
VStd = []\u000afor data in CensoredData:\u000a  Std.append(round(np.std(data),2))
p250
sg46
g244
sg47
I00
sg48
I00
sg49
VStd = []\u000afor data in CensoredData:\u000a  Std.append(round(np.std(data),2))
p251
sbsg50
g0
(g51
g52
(g53
g54
tp252
tp253
Rp254
sg58
VStd
p255
sbasS'_filepath'
p256
V/home/ubuntu/SciSheets/mysite/user/guest/tables/kristen_gene_table.pcl
p257
sg58
VGeneTable
p258
sb.