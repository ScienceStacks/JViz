ccopy_reg
_reconstructor
p0
(cscisheets.ui.dt_table
DTTable
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'_columns'
p6
(lp7
g0
(cscisheets.core.column
Column
p8
g2
Ntp9
Rp10
(dp11
S'_asis'
p12
I01
sS'_owning_table'
p13
g4
sS'_cells'
p14
(lp15
S'1'
p16
aS'2'
p17
aS'3'
p18
aS'4'
p19
aS'5'
p20
aS'6'
p21
aS'7'
p22
aS'8'
p23
aS'9'
p24
aS'10'
p25
aS'11'
p26
aS'12'
p27
aS'13'
p28
aS'14'
p29
aS'15'
p30
aS'16'
p31
aS'17'
p32
aS'18'
p33
aS'19'
p34
aS'20'
p35
aS'21'
p36
aS'22'
p37
aS'23'
p38
aS'24'
p39
asS'_formula_statement'
p40
g0
(cscisheets.core.column
FormulaStatement
p41
g2
Ntp42
Rp43
(dp44
S'_statement'
p45
NsS'_column'
p46
g10
sS'_isExpression'
p47
I00
sS'_isStatement'
p48
I00
sS'_formula'
p49
NsbsS'_data_class'
p50
g0
(cscisheets.core.helpers.api_util
DataClass
p51
c__builtin__
tuple
p52
(cnumpy
ndarray
p53
cscisheets.core.helpers.api_util
makeArray
p54
tp55
tp56
Rp57
sS'_name'
p58
S'row'
p59
sbag0
(g8
g2
Ntp60
Rp61
(dp62
g12
I00
sg13
g4
sg14
(lp63
I97
aI78
aI78
aI89
aI93
aI58
aI82
aI95
aI88
aI89
aI65
aI54
aI68
aI54
aI96
aI96
aI97
aI86
aI58
aI87
aI93
aI93
aI53
aI78
asg40
g0
(g41
g2
Ntp64
Rp65
(dp66
g45
Vimport random\u000a#EffData = [random.randint(50, 100) for x in range(24)]
p67
sg46
g61
sg47
I00
sg48
I00
sg49
Vimport random\u000a#EffData = [random.randint(50, 100) for x in range(24)]
p68
sbsg50
g0
(g51
g52
(g53
g54
tp69
tp70
Rp71
sg58
VEffData
p72
sbag0
(g8
g2
Ntp73
Rp74
(dp75
g12
I00
sg13
g4
sg14
(lp76
F3.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp77
Rp78
(dp79
g45
Vbatch_size = int(BatchSize[0])
p80
sg46
g74
sg47
I00
sg48
I00
sg49
g80
sbsg50
g0
(g51
g52
(g53
g54
tp81
tp82
Rp83
sg58
VBatchSize
p84
sbag0
(g8
g2
Ntp85
Rp86
(dp87
g12
I00
sg13
g4
sg14
(lp88
F60.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp89
Rp90
(dp91
g45
Vmin_eff = int(MinEff[0])
p92
sg46
g86
sg47
I00
sg48
I00
sg49
g92
sbsg50
g0
(g51
g52
(g53
g54
tp93
tp94
Rp95
sg58
VMinEff
p96
sbag0
(g8
g2
Ntp97
Rp98
(dp99
g12
I00
sg13
g4
sg14
(lp100
F5.0
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp101
Rp102
(dp103
g45
Vmax_std = MaxStd[0]
p104
sg46
g98
sg47
I00
sg48
I00
sg49
g104
sbsg50
g0
(g51
g52
(g53
g54
tp105
tp106
Rp107
sg58
VMaxStd
p108
sbag0
(g8
g2
Ntp109
Rp110
(dp111
g12
I00
sg13
g4
sg14
(lp112
(lp113
I97
aI78
aI78
aa(lp114
I89
aI93
aI58
aa(lp115
I82
aI95
aI88
aa(lp116
I89
aI65
aI54
aa(lp117
I68
aI54
aI96
aa(lp118
I96
aI97
aI86
aa(lp119
I58
aI87
aI93
aa(lp120
I93
aI53
aI78
aaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNasg40
g0
(g41
g2
Ntp121
Rp122
(dp123
g45
V# Grouping groups together samples based on BatchSize\u000abatch_count = len(EffData)/batch_size\u000aGroupedData = np.array(EffData).reshape(batch_count, batch_size)
p124
sg46
g110
sg47
I00
sg48
I00
sg49
V# Grouping groups together samples based on BatchSize\u000abatch_count = len(EffData)/batch_size\u000aGroupedData = np.array(EffData).reshape(batch_count, batch_size)
p125
sbsg50
g0
(g51
g52
(g53
g54
tp126
tp127
Rp128
sg58
VGroupedData
p129
sbag0
(g8
g2
Ntp130
Rp131
(dp132
g12
I00
sg13
g4
sg14
(lp133
(lp134
cnumpy.core.multiarray
scalar
p135
(cnumpy
dtype
p136
(S'i8'
p137
I0
I1
tp138
Rp139
(I3
S'<'
p140
NNNI-1
I-1
I0
tp141
bS'a\x00\x00\x00\x00\x00\x00\x00'
p142
tp143
Rp144
ag135
(g139
S'N\x00\x00\x00\x00\x00\x00\x00'
p145
tp146
Rp147
ag135
(g139
S'N\x00\x00\x00\x00\x00\x00\x00'
p148
tp149
Rp150
aa(lp151
g135
(g139
S'Y\x00\x00\x00\x00\x00\x00\x00'
p152
tp153
Rp154
ag135
(g139
S']\x00\x00\x00\x00\x00\x00\x00'
p155
tp156
Rp157
aa(lp158
g135
(g139
S'R\x00\x00\x00\x00\x00\x00\x00'
p159
tp160
Rp161
ag135
(g139
S'_\x00\x00\x00\x00\x00\x00\x00'
p162
tp163
Rp164
ag135
(g139
S'X\x00\x00\x00\x00\x00\x00\x00'
p165
tp166
Rp167
aa(lp168
g135
(g139
S'Y\x00\x00\x00\x00\x00\x00\x00'
p169
tp170
Rp171
ag135
(g139
S'A\x00\x00\x00\x00\x00\x00\x00'
p172
tp173
Rp174
aa(lp175
g135
(g139
S'D\x00\x00\x00\x00\x00\x00\x00'
p176
tp177
Rp178
ag135
(g139
S'`\x00\x00\x00\x00\x00\x00\x00'
p179
tp180
Rp181
aa(lp182
g135
(g139
S'`\x00\x00\x00\x00\x00\x00\x00'
p183
tp184
Rp185
ag135
(g139
S'a\x00\x00\x00\x00\x00\x00\x00'
p186
tp187
Rp188
ag135
(g139
S'V\x00\x00\x00\x00\x00\x00\x00'
p189
tp190
Rp191
aa(lp192
g135
(g139
S'W\x00\x00\x00\x00\x00\x00\x00'
p193
tp194
Rp195
ag135
(g139
S']\x00\x00\x00\x00\x00\x00\x00'
p196
tp197
Rp198
aa(lp199
g135
(g139
S']\x00\x00\x00\x00\x00\x00\x00'
p200
tp201
Rp202
ag135
(g139
S'N\x00\x00\x00\x00\x00\x00\x00'
p203
tp204
Rp205
aaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNasg40
g0
(g41
g2
Ntp206
Rp207
(dp208
g45
V# Pruning eliminates values less than MinEff\u000aGroupedPrunedData = []\u000afor data in GroupedData:\u000a  new_data = []\u000a  for d in data:\u000a    if d >= min_eff:\u000a      new_data.append(d)\u000a  GroupedPrunedData.append(new_data)
p209
sg46
g131
sg47
I00
sg48
I00
sg49
V# Pruning eliminates values less than MinEff\u000aGroupedPrunedData = []\u000afor data in GroupedData:\u000a  new_data = []\u000a  for d in data:\u000a    if d >= min_eff:\u000a      new_data.append(d)\u000a  GroupedPrunedData.append(new_data)
p210
sbsg50
g0
(g51
g52
(g53
g54
tp211
tp212
Rp213
sg58
VGroupedPrunedData
p214
sbag0
(g8
g2
Ntp215
Rp216
(dp217
g12
I00
sg13
g4
sg14
(lp218
(lp219
g147
ag150
aag151
a(lp220
g161
ag167
aag168
ag175
ag182
ag192
ag199
aNaNaNaNaNaNaNaNaNaNaNaNaNaNaNaNasg40
g0
(g41
g2
Ntp221
Rp222
(dp223
g45
V#Eliminate Values if exceed MaxStd\u000aCensoredData = []\u000afor data in GroupedPrunedData:\u000a  if (len(data) < 3) or (np.std(data) <= max_std):\u000a    CensoredData.append(data)\u000a  else:\u000a    mean = np.average(data)\u000a    distances = [np.abs(x - mean) for x in data]\u000a    max_distance = np.max(distances)\u000a    new_data = [x for x in data if np.abs(x - mean) < max_distance]\u000a    CensoredData.append(new_data)\u000a    
p224
sg46
g216
sg47
I00
sg48
I00
sg49
V#Eliminate Values if exceed MaxStd\u000aCensoredData = []\u000afor data in GroupedPrunedData:\u000a  if (len(data) < 3) or (np.std(data) <= max_std):\u000a    CensoredData.append(data)\u000a  else:\u000a    mean = np.average(data)\u000a    distances = [np.abs(x - mean) for x in data]\u000a    max_distance = np.max(distances)\u000a    new_data = [x for x in data if np.abs(x - mean) < max_distance]\u000a    CensoredData.append(new_data)\u000a    
p225
sbsg50
g0
(g51
g52
(g53
g54
tp226
tp227
Rp228
sg58
VCensoredData
p229
sbag0
(g8
g2
Ntp230
Rp231
(dp232
g12
I00
sg13
g4
sg14
(lp233
F78.0
aF91.0
aF85.0
aF77.0
aF82.0
aF93.0
aF90.0
aF85.5
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp234
Rp235
(dp236
g45
VMean = []\u000afor data in CensoredData:\u000a  Mean.append(round(np.average(data),2))
p237
sg46
g231
sg47
I00
sg48
I00
sg49
VMean = []\u000afor data in CensoredData:\u000a  Mean.append(round(np.average(data),2))
p238
sbsg50
g0
(g51
g52
(g53
g54
tp239
tp240
Rp241
sg58
VMean
p242
sbag0
(g8
g2
Ntp243
Rp244
(dp245
g12
I00
sg13
g4
sg14
(lp246
F0.0
aF2.0
aF3.0
aF12.0
aF14.0
aF4.97
aF3.0
aF7.5
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
aFnan
asg40
g0
(g41
g2
Ntp247
Rp248
(dp249
g45
VStd = []\u000afor data in CensoredData:\u000a  Std.append(round(np.std(data),2))
p250
sg46
g244
sg47
I00
sg48
I00
sg49
VStd = []\u000afor data in CensoredData:\u000a  Std.append(round(np.std(data),2))
p251
sbsg50
g0
(g51
g52
(g53
g54
tp252
tp253
Rp254
sg58
VStd
p255
sbasS'_filepath'
p256
V/home/ubuntu/SciSheets/mysite/user/guest/tables/kristen_gene_table.pcl
p257
sg58
VGeneTable
p258
sb.